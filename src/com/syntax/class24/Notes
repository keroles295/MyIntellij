what is the PolyMorphism:
   polyMorphism is the ability of a method to behave differently depending upon the object or parameters that we
   pass to a method.
   when we pass different parameters to the methods and it behaves differently then it calls static Polymorphism
   or compile time PolyMorphism or early binding.
   When we achieve the PolyMorphism through method overriding then it is called dynamic binding or run time PolyMorphism
   or late binding
Why we should use PolyMorphism:
   1)Cleaner code.
   2)we never prefer to change the existing code if we want to improve something we always want to create new methods
   and new classes. We can call these methods using the parent classes variable/ reference.
   3)we can call muliple methods from many classes with the help of a single variable. Like we can create the array
   of objects and with the help of a loop will be able to call all the methods from all the classes/
How can we PolyMorphism:
   1)create a perent class child relationship.
   2)overriding the methods in the child classes.
   3)create the array of all the child class objects and with the help of loop you can call all the methods from all
   the methods from all the child classes.
Rules:
   1)all the rules that apply for overriding also apply for the polymorphism.
   2)We can store the object of a child class inside a reference variable of tybe parent class
    But we cannot do the reverse.
   3)We can also create arrays of type parent and they can hold object of child class.

==================================================================================================
What is the Abstraction:
   abstraction is providing only the necessary details and hiding all the implementation details.
Why we should to learn it:
   1)it reduces the complexity by separating the idea from implementation.
   2)it helps use enforce rules and convey our requirement.
How we can use it:
   1)Create classes with the abstract keyword.
   2)use the abstract keyword with method header and don't provide the body of that method inside the
   parent class.
   3)Create the child classes and extends those classes from the parent class and implement the abstract methods.
   4)if we don't want to provide the implementation one or more methods we can declare the child class as abstract as well.



